@startuml
namespace message {
    class AESCTR << (S,Aquamarine) >> {
        - key []byte
        - plainmessage []byte
        - transformedmessage []byte
        - iv []byte
        - aesctr cipher.Stream

        + SetKey(key []byte) error
        + SetNewIV() error
        + SetPlainMessage(plainmessage []byte) error
        + GetPlainMessageMacAsByteArray() ([]byte, error)
        + GetPlainMessageMac() (string, error)
        + GetEncriptedMessage() []byte
        + GetEncodedEncriptedMessage() string
        + SetEncriptedMessage(t []byte) error
        + SetEncodedEncriptedMessage(t string) error
        + GetDecriptedMessage() []byte
        + GetDecriptedMessageMacAsByteArray() ([]byte, error)
        + GetDecriptedMessageMac() (string, error)
        + ConfirmMacFromByteArray(originalMac []byte) (bool, error)
        + ConfirmMacFromString(originalMac string) (bool, error)

    }
    class GlobalFuncsForAESCTR <<EncriptByteArrayByAESCTR(key []byte, plainmessage []byte) (crypticmessage []byte, mac []byte, err error)>> \
                               <<EncriptStringByAESCTR(key []byte, plainmessage string) (crypticmessage string, mac string, err error)>> \
                               <<DecriptByteArrayByAESCTR(key []byte, crypticmessage []byte) (decriptedmessage []byte, err error)>> \
                               <<DecriptByteArrayByAESCTRwithAuth(key []byte, crypticmessage []byte, originalmac []byte) (decriptedmessage []byte, authresult bool, err error)>> \
                               <<DecriptStringByAESCTR(key []byte, crypticmessage string) (decriptedmessage string, err error)>> \
                               <<DecriptStringByAESCTRwithAuth(key []byte, crypticmessage string, originalmac string) (decriptedmessage string, authresult bool, err error)>>
    class AESGCM << (S,Aquamarine) >> {
        - key []byte
        - plainmessage []byte
        - transformedmessage []byte
        - iv []byte
        - aesgcm cipher.AEAD

        + SetKey(key []byte) error
        + SetNewIV() error
        + SetPlainMessage(plainmessage []byte, aad []byte) error
        + GetEncriptedMessage() []byte
        + GetEncodedEncriptedMessage() string
        + SetEncriptedMessage(t []byte, aad []byte) error
        + SetEncodedEncriptedMessage(t string, aad []byte) error
        + GetDecriptedMessage() []byte

    }
    class GlobalFuncsForAESGCM <<EncriptByteArrayByAESGCM(key []byte, plainmessage []byte, aad []byte) (crypticmessage []byte, err error)>> \
                               <<EncriptStringByAESGCM(key []byte, plainmessage string, aad []byte) (crypticmessage string, err error)>> \
                               <<DecriptByteArrayByAESGCM(key []byte, crypticmessage []byte, aad []byte) (decriptedmessage []byte, err error)>> \
                               <<DecriptStringByAESGCM(key []byte, crypticmessage string, aad []byte) (decriptedmessage string, err error)>>
}


@enduml
